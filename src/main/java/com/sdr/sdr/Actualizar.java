/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sdr.sdr;

import com.mongodb.BasicDBObject;
import com.mongodb.Block;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.model.Filters;
import com.mongodb.client.model.Updates;
import static com.sdr.sdr.Main.db;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.bson.Document;
import org.bson.conversions.Bson;

/**
 *
 * @author berna
 */
public class Actualizar extends javax.swing.JFrame {

    /**
     * Creates new form Actualizar
     */
    String codigo;
    public Actualizar(String codigo) {
        initComponents();
        setLocationRelativeTo(null);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                INVENTARIO n = new INVENTARIO();
                n.setVisible(true);
            }
        });
        this.codigo=codigo;
        recuperarDatos(codigo);
    }

    void recuperarDatos(String codigo) {
        FindIterable<Document> iterable = db.getCollection("productos").find(new Document("CODIGO", codigo));
        // Iterate the results and apply a block to each resulting document.
        // Iteramos los resultados y aplicacimos un bloque para cada documento.
        iterable.forEach(new Block<Document>() {
            @Override
            public void apply(final Document document) {
                TxtArticulo.setText((String) document.get("ARTICULO"));
                TxtTipo.setText((String) document.get("TIPO"));

                Document qty = (Document) document.get("STOCK");
                double min = (double) qty.get("MINIMO");
                int minimo = (int) min;
                double act = (double) qty.get("ACTUAL");
                int actual = (int) act;
                TxtStockMin.setText("" + minimo);
                TxtStockActual.setText("" + actual);

                double costo = (double) document.get("COSTO");
                double precio = (double) document.get("PRECIO");
                TxtCosto.setText("" + costo);
                TxtPrecio.setText("" + precio);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        TxtStockMin = new javax.swing.JTextField();
        TxtArticulo = new javax.swing.JTextField();
        TxtTipo = new javax.swing.JTextField();
        TxtStockActual = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TxtCosto = new javax.swing.JTextField();
        BtnAceptar = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        TxtPrecio = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel4.setText("Tipo:");

        jLabel5.setText("Stock mínimo:");

        jLabel6.setText("Stock actual:");

        jLabel1.setText("Artículo:");

        TxtStockMin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtStockMinKeyTyped(evt);
            }
        });

        TxtStockActual.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtStockActualKeyTyped(evt);
            }
        });

        jLabel7.setText("Costo:");

        TxtCosto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtCostoKeyTyped(evt);
            }
        });

        BtnAceptar.setText("Aceptar");
        BtnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnAceptarActionPerformed(evt);
            }
        });

        jLabel8.setText("Precio de venta:");

        TxtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                TxtPrecioKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(TxtArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TxtStockMin)
                            .addComponent(TxtTipo)
                            .addComponent(TxtStockActual)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(TxtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel8)
                                .addGap(10, 10, 10)
                                .addComponent(TxtPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))))
                    .addComponent(BtnAceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TxtArticulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(TxtTipo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(TxtStockMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TxtStockActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TxtCosto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(TxtPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(BtnAceptar)
                .addContainerGap(43, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TxtStockMinKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtStockMinKeyTyped
        char caracter = evt.getKeyChar();
        if (caracter < '0' || caracter > '9') {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_TxtStockMinKeyTyped

    private void TxtStockActualKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtStockActualKeyTyped
        char caracter = evt.getKeyChar();
        if (caracter < '0' || caracter > '9') {
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_TxtStockActualKeyTyped

    private void TxtCostoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtCostoKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9'))
                && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '.' || TxtCosto.getText().contains("."))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_TxtCostoKeyTyped

    private void BtnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnAceptarActionPerformed
    if (!valido()) {
            return;
        }
        MongoCollection<Document> collection = db.getCollection("productos");
               double costo = Double.parseDouble(TxtCosto.getText());
                double precio = Double.parseDouble(TxtPrecio.getText());
                double minimo = Double.parseDouble(TxtStockMin.getText());
                double actual = Double.parseDouble(TxtStockActual.getText());     
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("TIPO",TxtTipo.getText().toUpperCase()));
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("ARTICULO",TxtArticulo.getText().toUpperCase()));
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("COSTO",costo));
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("PRECIO",precio));
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("STOCK.MINIMO",minimo));
               collection.updateOne(Filters.eq("CODIGO",this.codigo),Updates.set("STOCK.ACTUAL",actual));
        JOptionPane.showMessageDialog(null,"Registro actualizado");
        this.dispose();
        INVENTARIO n=new INVENTARIO();
        n.setVisible(true);
    }//GEN-LAST:event_BtnAceptarActionPerformed

    private void TxtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TxtPrecioKeyTyped
        char caracter = evt.getKeyChar();
        if (((caracter < '0') || (caracter > '9'))
                && (caracter != KeyEvent.VK_BACK_SPACE)
                && (caracter != '.' || TxtPrecio.getText().contains("."))) {
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_TxtPrecioKeyTyped

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnAceptar;
    private javax.swing.JTextField TxtArticulo;
    private javax.swing.JTextField TxtCosto;
    private javax.swing.JTextField TxtPrecio;
    private javax.swing.JTextField TxtStockActual;
    private javax.swing.JTextField TxtStockMin;
    private javax.swing.JTextField TxtTipo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    // End of variables declaration//GEN-END:variables


private boolean valido() {
        if (TxtArticulo.getText().isEmpty()
                || TxtTipo.getText().isEmpty()
                || TxtStockMin.getText().isEmpty()
                || TxtStockActual.getText().isEmpty()
                || TxtCosto.getText().isEmpty()
                || TxtPrecio.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Registre la información necesaria");
            return false;
        } else {
            try {
                double costo = Double.parseDouble(TxtCosto.getText());
                double precio = Double.parseDouble(TxtPrecio.getText());
                double minimo = Double.parseDouble(TxtStockMin.getText());
                double actual = Double.parseDouble(TxtStockActual.getText());
                if (costo < 0 || precio < 0 || minimo < 0 || actual < 0) {
                    JOptionPane.showMessageDialog(null, "Introduzca valores válidos para precio, costo y stock");
                    return false;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Introduzca valores válidos para precio, costo y stock");
                return false;
            }
        }
        return true;
    }



}
